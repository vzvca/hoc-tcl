#! /usr/bin/env tclsh
## ==========> source hoc1.tac.tcl  (start)
proc YYABORT {} {
    return -code return 1
}
proc YYACCEPT {} {
    return -code return 0
}
proc yyclearin {} {
    upvar yytoken t
    set t ""
}
proc yyerror s {
    puts stderr $s
}
proc yysetupvalues {stack pointer numsyms} {
    upvar 1 1 y
    set y {}
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        set y [lindex $stack $pointer]
        incr pointer
    }
}
proc yyunsetupvalues numsyms {
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        unset y
    }
}
array set ::yytable {
  0:257 shift
  18:+,target 10
  17:258 reduce
  15:) reduce
  0:258 reduce
  15:258,target 9
  15:* shift
  0:260 goto
  0:259 goto
  5:0,target 2
  15:0,target 9
  15:+ shift
  8:257,target 3
  0:261 goto
  2:258 reduce
  15:- shift
  7:),target 13
  3:-,target 6
  17:),target 8
  13:-,target 11
  15:/ shift
  9:261,target 15
  6:258 reduce
  18:*,target 9
  15:0 reduce
  8:257 shift
  8:258 reduce
  15:/,target 12
  8:260 goto
  8:259 goto
  6:* shift
  6:258,target 3
  8:261 goto
  6:+ shift
  6:0,target 3
  16:0,target 7
  10:257,target 3
  0:error shift
  2:0 reduce
  18:258,target 10
  12:( shift
  6:- shift
  0:(,target 1
  10:(,target 1
  18:),target 10
  6:/ shift
  13:258,target 11
  11:261,target 17
  6:0 reduce
  16:) reduce
  6:/,target 12
  16:/,target 12
  16:* shift
  3:+,target 6
  16:+ shift
  13:+,target 11
  8:error shift
  1:257,target 3
  17:0,target 8
  8:(,target 1
  0:0,target 5
  16:- shift
  1:(,target 1
  3:) reduce
  11:(,target 1
  3:* reduce
  16:/ shift
  15:-,target 11
  3:+ reduce
  16:0 reduce
  10:257 shift
  7:) shift
  3:*,target 6
  3:- reduce
  16:258,target 7
  13:*,target 11
  12:257 shift
  7:/,target 12
  7:* shift
  17:/,target 12
  10:261 goto
  9:257,target 3
  7:+ shift
  3:/ reduce
  8:0,target 5
  3:0 reduce
  18:0,target 10
  12:261 goto
  9:(,target 1
  7:- shift
  13:) reduce
  16:258 reduce
  13:* reduce
  12:(,target 1
  7:/ shift
  6:-,target 11
  16:-,target 11
  13:+ reduce
  1:257 shift
  3:),target 6
  18:258 reduce
  13:),target 11
  0:( shift
  17:) reduce
  13:- reduce
  17:* shift
  1:261 goto
  3:258 reduce
  18:/,target 12
  17:+ shift
  13:/ reduce
  11:257,target 3
  15:+,target 10
  13:0 reduce
  0:261,target 6
  2:258,target 4
  5:258 shift
  17:- shift
  0:error,target 2
  2:0,target 4
  17:/ shift
  12:261,target 18
  9:257 shift
  7:-,target 11
  17:-,target 11
  17:0 reduce
  8:( shift
  0:0 reduce
  10:( shift
  9:261 goto
  15:*,target 9
  0:260,target 5
  0:259,target 4
  8:261,target 6
  6:+,target 10
  4:0 accept
  16:+,target 10
  8:error,target 2
  3:0,target 6
  13:0,target 11
  5:258,target 8
  8:0 reduce
  18:-,target 11
  1:( shift
  18:) reduce
  17:258,target 8
  15:),target 9
  0:258,target 5
  18:* shift
  8:260,target 5
  8:259,target 14
  6:*,target 9
  18:+ shift
  16:*,target 9
  14:0 reduce
  10:261,target 16
  7:+,target 10
  3:/,target 6
  18:- shift
  17:+,target 10
  13:/,target 11
  4:0,target 0
  18:/ shift
  14:0,target 1
  11:257 shift
  18:0 reduce
  9:( shift
  0:257,target 3
  11:( shift
  8:258,target 5
  16:),target 7
  13:258 reduce
  11:261 goto
  12:257,target 3
  7:*,target 9
  17:*,target 9
  15:258 reduce
  1:261,target 7
  3:258,target 6
  5:0 reduce
}
array set ::yyrules {
  9,l 261
  11,l 261
  2,l 259
  6,l 261
  3,l 260
  7,l 261
  0,l 262
  4,l 260
  8,l 261
  10,l 261
  1,l 259
  5,l 260
}
array set ::yyrules {
  5,dc 0
  0,dc 1
  8,dc 3
  3,dc 1
  10,dc 3
  6,dc 1
  1,dc 3
  9,dc 3
  4,dc 1
  11,dc 3
  7,dc 3
  2,dc 1
}
array set ::yyrules {
  7,line 24
  10,line 27
  4,line 19
  1,line 14
  9,line 26
  6,line 23
  3,line 18
  8,line 25
  11,line 28
  5,line 20
  2,line 15
}
proc yyparse {} {
    set yystate_stack {0}
    set yyvalue_stack {{}}
    set yytoken ""
    set yyaccepted 0
    while {$yyaccepted == 0} {
        set yystate [lindex $yystate_stack end]
        if {$yytoken == ""} {
            set ::yylval ""
            set yytoken [yylex]
            set yybuflval $::yylval
        }
        if {![info exists ::yytable($yystate:$yytoken)]} {
            # pop off states until error token accepted
            while {[llength $yystate_stack] > 0 &&  ![info exists ::yytable($yystate:error)]} {
                set yystate_stack [lrange $yystate_stack 0 end-1]
                set yyvalue_stack [lrange $yyvalue_stack 0  [expr {[llength $yystate_stack] - 1}]]
                set yystate [lindex $yystate_stack end]
            }
            if {[llength $yystate_stack] == 0} {
                yyerror "parse error"
                return 1
            }
            lappend yystate_stack [set yystate $::yytable($yystate:error,target)]
            lappend yyvalue_stack {}
            # consume tokens until it finds an acceptable one
            while {![info exists ::yytable($yystate:$yytoken)]} {
                if {$yytoken == 0} {
                    yyerror "end of file while recovering from error"
                    return 1
                }
                set ::yylval {}
                set yytoken [yylex]
                set yybuflval $::yylval
            }
            continue
        }
        switch -- $::yytable($yystate:$yytoken) {
            shift {
                lappend yystate_stack $::yytable($yystate:$yytoken,target)
                lappend yyvalue_stack $yybuflval
                set yytoken ""
            }
            reduce {
                set yyrule $::yytable($yystate:$yytoken,target)
                set yyl $::yyrules($yyrule,l)
                if {[info exists ::yyrules($yyrule,e)]} {
                    set yydc $::yyrules($yyrule,e)
                } else {
                    set yydc $::yyrules($yyrule,dc)
                }
                set yystackpointer [expr {[llength $yystate_stack]-$yydc}]
                yysetupvalues $yyvalue_stack $yystackpointer $yydc
                set _ $1
                set ::yylval [lindex $yyvalue_stack end]
                switch -- $yyrule {
                    3 {  puts " = $1"  }
                    4 {  puts " -- error"  }
                    6 {  set _ $1  }
                    7 {  set _ [expr {$1 + $3}]  }
                    8 {  set _ [expr {$1 - $3}]  }
                    9 {  set _ [expr {$1 * $3}]  }
                    10 {  set _ [expr {$1 / $3}]  }
                    11 {  set _ $2  }
                }
                yyunsetupvalues $yydc
                # pop off tokens from the stack if normal rule
                if {![info exists ::yyrules($yyrule,e)]} {
                    incr yystackpointer -1
                    set yystate_stack [lrange $yystate_stack 0 $yystackpointer]
                    set yyvalue_stack [lrange $yyvalue_stack 0 $yystackpointer]
                }
                # now do the goto transition
                lappend yystate_stack $::yytable([lindex $yystate_stack end]:$yyl,target)
                lappend yyvalue_stack $_
            }
            accept {
                set yyaccepted 1
            }
            goto -
            default {
                puts stderr "Internal parser error: illegal command $::yytable($yystate:$yytoken)"
                return 2
            }
        }
    }
    return 0
}
## ==========> source hoc1.fcl.tcl  (start)
## ==========> source hoc1.tac.tab.tcl  (start)
set ::NUMBER 257
set ::NEWLINE 258
set ::yylval {}
## ==========> source hoc1.tac.tab.tcl  (end)
proc yywrap {} {
    return 1
}
proc ECHO {{s ""}} {
    if {$s == ""} {
        puts -nonewline $::yyout $::yytext
    } else {
        puts -nonewline $::yyout $s
    }
}
proc YY_FLUSH_BUFFER {} {
    set ::yy_buffer ""
    set ::yy_index 0
    set ::yy_done 0
}
proc yyrestart new_file {
    set ::yyin $new_file
    YY_FLUSH_BUFFER
}
proc YY_INPUT {buf result max_size} {
    upvar $result ret_val
    upvar $buf new_data
    if {$::yyin != ""} {
        gets $::yyin new_data
        if {![eof $::yyin]} {
            append new_data \n
        }
        set ret_val [string length $new_data]
    } else {
        set new_data ""
        set ret_val 0
    }
}
proc yy_scan_string str {
    append ::yy_buffer $str
    set ::yyin ""
}
proc unput c {
    set s [string range $::yy_buffer 0 [expr {$::yy_index - 1}]]
    append s $c
    set ::yy_buffer [append s [string range $::yy_buffer $::yy_index end]]
}
proc yyless n {
    set s [string range $::yy_buffer 0 [expr {$::yy_index - 1}]]
    append s [string range $::yytext $n end]
    set ::yy_buffer [append s [string range $::yy_buffer $::yy_index end]]
    set ::yytext [string range $::yytext 0 [expr {$n - 1}]]
    set ::yyleng [string length $::yytext]
}
proc input {} {
    if {[string length $::yy_buffer] - $::yy_index < 1} {
       set new_buffer_size 0
       if {$::yy_done == 0} {
           YY_INPUT new_buffer new_buffer_size 1
           append ::yy_buffer $new_buffer
           if {$new_buffer_size == 0} {
               set ::yy_done 1
           }
       }
       if $::yy_done {
           if {[yywrap] == 0} {
               return [input]
           } elseif {[string length $::yy_buffer] - $::yy_index == 0} {
               return {}
           }
        }
    }
    set c [string index $::yy_buffer $::yy_index]
    incr ::yy_index
    return $c
}
set ::yytext {}
set ::yyleng 0
set ::yy_buffer {}
set ::yy_index 0
set ::yy_done 0
if {![info exists ::yyin]} {
    set ::yyin "stdin"
}
if {![info exists ::yyout]} {
    set ::yyout "stdout"
}
proc yylex {} {
    upvar #0 ::yytext yytext
    upvar #0 ::yyleng yyleng
    while {1} {
        if {[string length $::yy_buffer] - $::yy_index < 1} {
            if {$::yy_done == 0} {
                set yy_new_buffer ""
                YY_INPUT yy_new_buffer yy_buffer_size 1
                append ::yy_buffer $yy_new_buffer
                if {$yy_buffer_size == 0 &&  [string length $::yy_buffer] - $::yy_index == 0} {
                    set ::yy_done 1
                }
            }
            if $::yy_done {
                if {[yywrap] == 0} {
                    set ::yy_done 0
                    continue
                } elseif {[string length $::yy_buffer] - $::yy_index == 0} {
                    break
                }
            }            
        }
        set ::yyleng 0
        set yy_matched_rule -1
        # rule 0: {number}
        if {[regexp -start $::yy_index -indices -line  -- {\A(([0-9]+[.]?[0-9]*([eE][-+]?[0-9]+)?))} $::yy_buffer yy_match] > 0 &&  [lindex $yy_match 1] - $::yy_index + 1 > $::yyleng} {
            set ::yytext [string range $::yy_buffer $::yy_index [lindex $yy_match 1]]
            set ::yyleng [string length $::yytext]
            set yy_matched_rule 0
        }
        # rule 1: \n
        if {[regexp -start $::yy_index -indices -line  -- {\A(\n)} $::yy_buffer yy_match] > 0 &&  [lindex $yy_match 1] - $::yy_index + 1 > $::yyleng} {
            set ::yytext [string range $::yy_buffer $::yy_index [lindex $yy_match 1]]
            set ::yyleng [string length $::yytext]
            set yy_matched_rule 1
        }
        # rule 2: \s
        if {[regexp -start $::yy_index -indices -line  -- {\A(\s)} $::yy_buffer yy_match] > 0 &&  [lindex $yy_match 1] - $::yy_index + 1 > $::yyleng} {
            set ::yytext [string range $::yy_buffer $::yy_index [lindex $yy_match 1]]
            set ::yyleng [string length $::yytext]
            set yy_matched_rule 2
        }
        # rule 3: .
        if {[regexp -start $::yy_index -indices -line  -- {\A(.)} $::yy_buffer yy_match] > 0 &&  [lindex $yy_match 1] - $::yy_index + 1 > $::yyleng} {
            set ::yytext [string range $::yy_buffer $::yy_index [lindex $yy_match 1]]
            set ::yyleng [string length $::yytext]
            set yy_matched_rule 3
        }
        if {$yy_matched_rule == -1} {
            set ::yytext [string index $::yy_buffer $::yy_index]
            set ::yyleng 1
        }
        incr ::yy_index $::yyleng
        # workaround for Tcl's circumflex behavior
        if {[string index $::yytext end] == "\n"} {
            set ::yy_buffer [string range $::yy_buffer $::yy_index end]
            set ::yy_index 0
        }
        switch -- $yy_matched_rule {
            0 {
set ::yylval $yytext; return $::NUMBER
            }
            1 {
return $::NEWLINE
            }
            2 {
# ignore whitespace
            }
            3 {
set ::yylval $yytext; return $yytext
            }
            default
                { ECHO }
        }
    }
    return 0
}
## ==========> source hoc1.fcl.tcl  (end)
yyparse
## ==========> source hoc1.tac.tcl  (end)
